package com.company;

import java.io.*;
import java.util.*;

public class Container<E> implements Iterable <E>, Serializable, Externalizable {

    public class Node implements Serializable{
        private Node next;
        private E data;

        Node() {
        }

        Node(E data){
            this();
            this.data = data;
            next = null;
        }

    }

    public class MyIterator implements Iterator {
        private int index;
        private boolean canRemove;

        MyIterator(){
            index = 0;
            canRemove = false;
        }
        @Override
        public boolean hasNext() {
            return index < size();
        }

        @Override
        public E next() throws NoSuchElementException {
            E data = get(index);
            if(data == null){
                throw new NoSuchElementException();
            }
            index++;
            canRemove = true;
            return data;
        }

        @Override
        public void remove() throws IllegalStateException{
            if(!canRemove){
                throw new IllegalStateException();
            }
            Container.this.remove(--index);
        }
    }


    private int size;
    private Node head;
    private Node tail;


    public Container(){
        head = null;
        tail = null;
        size = 0;
    }

    /**

     */
    public void add(E data) throws IllegalArgumentException{
        if(data == null){
            throw new IllegalArgumentException("null");
        }
        if(head == null) {
            head = new Node(data);
            tail = head;
            size = 1;
        }
        else {
            Node last = tail;
            tail = new Node(data);
            last.next = tail;
            size++;
        }
    }

    /**

     */
    public E get(int index) {
        if(index == 0) {
            return head.data;
        }
        else if(index > 0 && index < size) {
            Node crawler = head;
            for(int i = 0; i < index; i++) {
                if(crawler.next != null) {
                    crawler = crawler.next;
                }
                else {
                    return null;
                }
            }

            return crawler.data;
        }
        else return null;
    }

    public E getFirst(){
        return head.data;
    }

    public E getLast(){
        return tail.data;
    }

    /**
     *
     */
    public boolean remove(int index) {
        if(head == null) {
            return false;
        }
        if(index == 0) {
            head = head.next;
            size--;
            return true;
        }
        if(index > 0) {
            Node crawler = head;
            for(int i = 0; i < index - 1; i++) {
                if(crawler.next == null) {
                    return false;
                }
                crawler = crawler.next;
            }
            Node tmp = crawler.next;
            crawler.next = tmp.next;
            size--;
            return true;
        }
        return false;
    }

    public boolean remove(E obj) throws IllegalArgumentException{
        if(head == null){
            return false;
        }
        if(obj == null){
            throw new IllegalArgumentException();
        }
        Node crawler = head;
        if(Objects.equals(crawler.data, obj)){
            head = crawler.next;
            size--;
            return true;
        }
        while (crawler != null){
            Node tmp = crawler.next;
            if(Objects.equals(tmp.data, obj)){
                crawler.next = tmp.next;
                size--;
                return true;
            }
            crawler = crawler.next;
        }
        return false;
    }

    /**

     */
    public int size() {
        return size;
    }

    public void clear(){
        head = null;
        tail = null;
        size = 0;
    }

    public String toString(){
        if(size == 0){
            return"";
        }
        StringBuilder str = new StringBuilder();
        Node crawler = head;
        for(int i = 0; i < size; i++){
            str.append(crawler.data + " ");
            crawler = crawler.next;
        }
        return str.toString();
    }

    public boolean equals(Object obj){
        if(this == obj) return true;
        if(obj == null) return false;
        if(getClass() != obj.getClass()) return false;

        Container other = (Container) obj;

        if(size != other.size) return false;

        Node crawler = other.head;

        for(E e: this){
            if(!e.equals(crawler.data)) return false;
            crawler = crawler.next;
        }
        return true;
    }

    public Object[] toArray(){
        Object[] objects = new Object[size];
        Node crawler = head;
        for(int i = 0; i < size; i++){
            objects[i] = crawler.data;
            crawler = crawler.next;
        }
        return objects;
    }

    public boolean contains(E data){
        if(size == 0){
            return false;
        }
        Node crawler = head;

        for(int i = 0; i < size; i++){
            if(Objects.equals(crawler.data, data)){
                return true;
            }
            crawler = crawler.next;
        }
        return false;
    }

    public boolean containsAll(Container<E> collection){
        if(size == 0 || collection == null){
            return  false;
        }
        for(E e: collection){
            Node crawler = head;
            boolean is = false;
            for(int i = 0; i < size; i++){
                if(Objects.equals(crawler.data, e)){
                    is = true;
                    break;
                }
                crawler = crawler.next;
            }
            if(!is){
                return false;
            }
        }
        return true;
    }

    public Iterator<E> iterator(){
        return new MyIterator();
    }

    @Override
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeInt(size);
        out.writeObject(head);
        out.writeObject(tail);
    }

    @Override
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        size = in.readInt();
        head = (Node) in.readObject();
        tail = (Node) in.readObject();
    }


}

